<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when deletes occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterDeleteTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="gettitle" access="public" returntype="string" default="string" hint="Accessor for property title" output="false">
<cfscript>
return getTransferObject().gettitle(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="containscomment" access="public" returntype="boolean" default="boolean" hint="If this array contains a particular instance of posts.comment" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to look for">
<cfargument name="pkCheckOnly" type="boolean" required="false" hint="Expert/Transfer use only: only checks primary keys" default="false">
<cfscript>
return getTransferObject().containscomment(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsPersisted" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
return getTransferObject().getIsPersisted(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getauthor" access="public" returntype="string" default="string" hint="Accessor for property author" output="false">
<cfscript>
return getTransferObject().getauthor(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getClassName" access="public" returntype="string" default="string" hint="The class name of the TransferObject" output="false">
<cfscript>
return getTransferObject().getClassName(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getOriginalTransferObject" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns this object" output="false">
<cfscript>
return getTransferObject().getOriginalTransferObject(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="settime" access="public" returntype="void" default="void" hint="Mutator for property time" output="false">
<cfargument name="time" type="date" required="true" hint="The value to set time to">
<cfscript>
getTransferObject().settime(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="findcomment" access="public" returntype="numeric" default="numeric" hint="Find the index number that the given object is at in the Array. Returns -1 if it can't be found.'" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to search for">
<cfscript>
return getTransferObject().findcomment(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Constructor for Transfer class posts.entry" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true" hint="The Transfer library">
<cfargument name="utility" type="transfer.com.util.Utility" required="true" hint="The Utility object">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true" hint="The Nullable lookup object">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true" hint="What is determined to be the base 'this' object for this TransferObject">
<cfscript>
return getTransferObject().init(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="sameTransfer" access="public" returntype="boolean" default="boolean" hint="Checks to see if 2 transfer objects are the same" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="Yes" hint="The transfer object to check if we are equal">
<cfscript>
return getTransferObject().sameTransfer(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="Observer method action for when updates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterUpdateTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
return getTransferObject().getMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="set the Property state of this object with a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setPropertyMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="set the state of this object from a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="sortcomment" access="public" returntype="void" default="void" hint="Sort all elements in the array comment" output="false">
<cfscript>
getTransferObject().sortcomment(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsDirty" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
return getTransferObject().getIsDirty(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The object to copy values to">
<cfscript>
getTransferObject().copyValuesTo(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
return getTransferObject().getPropertyMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setcommentMemento" access="public" returntype="void" default="void" hint="set the state of composition onetomany 'comment'" output="false">
<cfargument name="memento" type="array" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setcommentMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcomment" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns the posts.comment object at the given index in the array" output="false">
<cfargument name="index" type="numeric" required="true" hint="The index in the array to retrieve">
<cfscript>
return getTransferObject().getcomment(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcommentIterator" access="public" returntype="any" default="any" hint="return a java.util.Iterator of posts.comment objects" output="false">
<cfscript>
return getTransferObject().getcommentIterator(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The TransferObject to test against">
<cfscript>
return getTransferObject().equalsTransfer(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getentryBody" access="public" returntype="string" default="string" hint="Accessor for property entryBody" output="false">
<cfscript>
return getTransferObject().getentryBody(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcommentMemento" access="public" returntype="array" default="array" hint="returns the memento for the onetomany comment" output="false">
<cfscript>
return getTransferObject().getcommentMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcommentArray" access="public" returntype="array" default="array" hint="returns the entire array of posts.comment" output="false">
<cfscript>
return getTransferObject().getcommentArray(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setentry_id" access="public" returntype="void" default="void" hint="Mutator for property entry_id" output="false">
<cfargument name="entry_id" type="uuid" required="true" hint="The value to set entry_id to">
<cfscript>
getTransferObject().setentry_id(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcommentisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'comment' has been loaded yet" output="false">
<cfscript>
return getTransferObject().getcommentisLoaded(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getentry_id" access="public" returntype="uuid" default="uuid" hint="Accessor for property entry_id" output="false">
<cfscript>
return getTransferObject().getentry_id(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="clone" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Get a deep clone of this object" output="false">
<cfscript>
return getTransferObject().clone(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setauthor" access="public" returntype="void" default="void" hint="Mutator for property author" output="false">
<cfargument name="author" type="string" required="true" hint="The value to set author to">
<cfscript>
getTransferObject().setauthor(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="settitle" access="public" returntype="void" default="void" hint="Mutator for property title" output="false">
<cfargument name="title" type="string" required="true" hint="The value to set title to">
<cfscript>
getTransferObject().settitle(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="gettime" access="public" returntype="date" default="date" hint="Accessor for property time" output="false">
<cfscript>
return getTransferObject().gettime(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when creates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterCreateTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="actionAfterDiscardTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when discards occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterDiscardTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsClone" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
return getTransferObject().getIsClone(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setentryBody" access="public" returntype="void" default="void" hint="Mutator for property entryBody" output="false">
<cfargument name="entryBody" type="string" required="true" hint="The value to set entryBody to">
<cfscript>
getTransferObject().setentryBody(argumentCollection=arguments);</cfscript>
</cffunction>


