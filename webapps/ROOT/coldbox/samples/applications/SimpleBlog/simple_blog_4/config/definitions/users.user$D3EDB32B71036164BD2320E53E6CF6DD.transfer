<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Constructor for Transfer class users.user" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true" hint="The Transfer library">
<cfargument name="utility" type="transfer.com.util.Utility" required="true" hint="The Utility object">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true" hint="The Nullable lookup object">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true" hint="What is determined to be the base 'this' object for this TransferObject">
<cfscript>
instance = StructNew();
setThisObject(arguments.thisObject);
setTransfer(arguments.transfer);
setUtility(arguments.utility);
setSystem(createObject("java", "java.lang.System"));
setNullable(arguments.nullable);
setClassName("users.user");
setIsDirty(true);
setIsPersisted(false);
setIsClone(false);
setuser_id(getNullable().getNullNumeric(getClassName(), "user_id"));
setfirstName("");
setlastName("");
setuserName("");
setpassword("");
setuserType("");
setlastLogin(Now());
setLoaded(StructNew());
if(StructKeyExists(this, "configure") OR StructKeyExists(variables, "configure"))
{
configure();
}
return this;
</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The TransferObject to test against">
<cfscript>
if(getIsPersisted())
{
if(getClassName() neq arguments.transfer.getClassName())
{
return false;
}
return (getuser_id() eq arguments.transfer.getuser_id());
}
else
{
return sameTransfer(arguments.transfer);
}
</cfscript>
</cffunction>

<cffunction name="getuser_id" access="public" returntype="numeric" default="numeric" hint="Accessor for property user_id" output="false">
<cfscript>
return instance.user_id;
</cfscript>
</cffunction>

<cffunction name="setuser_id" access="public" returntype="void" default="void" hint="Mutator for property user_id" output="false">
<cfargument name="user_id" type="numeric" required="true" hint="The value to set user_id to">
<cfscript>
if(NOT StructKeyExists(instance, "user_id") OR getuser_id() neq arguments.user_id)
{
instance.user_id = getUtility().trimZero(arguments.user_id);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getfirstName" access="public" returntype="string" default="string" hint="Accessor for property firstName" output="false">
<cfscript>
return instance.firstName;
</cfscript>
</cffunction>

<cffunction name="setfirstName" access="public" returntype="void" default="void" hint="Mutator for property firstName" output="false">
<cfargument name="firstName" type="string" required="true" hint="The value to set firstName to">
<cfscript>
if(NOT StructKeyExists(instance, "firstName") OR Compare(getfirstName(), arguments.firstName) neq 0)
{
instance.firstName = (arguments.firstName);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getlastName" access="public" returntype="string" default="string" hint="Accessor for property lastName" output="false">
<cfscript>
return instance.lastName;
</cfscript>
</cffunction>

<cffunction name="setlastName" access="public" returntype="void" default="void" hint="Mutator for property lastName" output="false">
<cfargument name="lastName" type="string" required="true" hint="The value to set lastName to">
<cfscript>
if(NOT StructKeyExists(instance, "lastName") OR Compare(getlastName(), arguments.lastName) neq 0)
{
instance.lastName = (arguments.lastName);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getuserName" access="public" returntype="string" default="string" hint="Accessor for property userName" output="false">
<cfscript>
return instance.userName;
</cfscript>
</cffunction>

<cffunction name="setuserName" access="public" returntype="void" default="void" hint="Mutator for property userName" output="false">
<cfargument name="userName" type="string" required="true" hint="The value to set userName to">
<cfscript>
if(NOT StructKeyExists(instance, "userName") OR Compare(getuserName(), arguments.userName) neq 0)
{
instance.userName = (arguments.userName);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getpassword" access="public" returntype="string" default="string" hint="Accessor for property password" output="false">
<cfscript>
return instance.password;
</cfscript>
</cffunction>

<cffunction name="setpassword" access="public" returntype="void" default="void" hint="Mutator for property password" output="false">
<cfargument name="password" type="string" required="true" hint="The value to set password to">
<cfscript>
if(NOT StructKeyExists(instance, "password") OR Compare(getpassword(), arguments.password) neq 0)
{
instance.password = (arguments.password);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getuserType" access="public" returntype="string" default="string" hint="Accessor for property userType" output="false">
<cfscript>
return instance.userType;
</cfscript>
</cffunction>

<cffunction name="setuserType" access="public" returntype="void" default="void" hint="Mutator for property userType" output="false">
<cfargument name="userType" type="string" required="true" hint="The value to set userType to">
<cfscript>
if(NOT StructKeyExists(instance, "userType") OR Compare(getuserType(), arguments.userType) neq 0)
{
instance.userType = (arguments.userType);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getlastLogin" access="public" returntype="date" default="date" hint="Accessor for property lastLogin" output="false">
<cfscript>
return instance.lastLogin;
</cfscript>
</cffunction>

<cffunction name="setlastLogin" access="public" returntype="void" default="void" hint="Mutator for property lastLogin" output="false">
<cfargument name="lastLogin" type="date" required="true" hint="The value to set lastLogin to">
<cfscript>
if(NOT StructKeyExists(instance, "lastLogin") OR getlastLogin() neq arguments.lastLogin)
{
instance.lastLogin = (arguments.lastLogin);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="set the state of this object from a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
var composite = 0;
if(NOT getIsPersisted())
{
setuser_id(arguments.memento.user_id);
}
setPropertyMemento(arguments.memento);
</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="set the Property state of this object with a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
setfirstName(arguments.memento.firstName);
setlastName(arguments.memento.lastName);
setuserName(arguments.memento.userName);
setpassword(arguments.memento.password);
setuserType(arguments.memento.userType);
setlastLogin(arguments.memento.lastLogin);
</cfscript>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
var memento = StructNew();
memento.user_id = getuser_id();
memento.transfer_isDirty = getIsDirty();
memento.transfer_isPersisted = getIsPersisted();
StructAppend(memento, getPropertyMemento());
return memento;
</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
var memento = StructNew();
memento.firstName = getfirstName();
memento.lastName = getlastName();
memento.userName = getuserName();
memento.password = getpassword();
memento.userType = getuserType();
memento.lastLogin = getlastLogin();
return memento;
</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The object to copy values to">
<cfscript>
if(arguments.transfer.getClassName() neq "users.user")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'users.user'");
}
arguments.transfer.setMemento(getMemento());
</cfscript>
</cffunction>

<cffunction name="validateCacheState" access="package" returntype="boolean" default="boolean" hint="if this object is cached, then validate that all it's composites are cached too" output="false">
<cfscript>
var iterator = 0;
var item = 0;
if(getIsPersisted() AND NOT getTransfer().validateIsCached(getThisObject()))
{
return true;
}
return true;
</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when creates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when deletes occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="Observer method action for when updates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
</cfscript>
</cffunction>

<cffunction name="actionAfterDiscardTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when discards occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var discard = false;
var className = arguments.event.getTransferObject().getClassName();
if(discard)
{
getTransfer().discard(getThisObject());
}
</cfscript>
</cffunction>


