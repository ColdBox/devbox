<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Constructor for Transfer class user.User" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true" hint="The Transfer library">
<cfargument name="utility" type="transfer.com.util.Utility" required="true" hint="The Utility object">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true" hint="The Nullable lookup object">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true" hint="What is determined to be the base 'this' object for this TransferObject">
<cfscript>
instance = StructNew();
setThisObject(arguments.thisObject);
setTransfer(arguments.transfer);
setUtility(arguments.utility);
setSystem(createObject("java", "java.lang.System"));
setNullable(arguments.nullable);
setClassName("user.User");
setIsDirty(true);
setIsPersisted(false);
setIsClone(false);
setuserId(getNullable().getNullNumeric(getClassName(), "userId"));
setpassword("");
setfirstName("");
setlastName("");
setemail("");
setupdatedOn(Now());
setcreatedOn(Now());
setisActive(false);
setLoaded(StructNew());
setUserTypeisLoaded(true);
if(StructKeyExists(this, "configure") OR StructKeyExists(variables, "configure"))
{
configure();
}
return this;
</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The TransferObject to test against">
<cfscript>
if(getIsPersisted())
{
if(getClassName() neq arguments.transfer.getClassName())
{
return false;
}
return (getuserId() eq arguments.transfer.getuserId());
}
else
{
return sameTransfer(arguments.transfer);
}
</cfscript>
</cffunction>

<cffunction name="getuserId" access="public" returntype="numeric" default="numeric" hint="Accessor for property userId" output="false">
<cfscript>
return instance.userId;
</cfscript>
</cffunction>

<cffunction name="setuserId" access="public" returntype="void" default="void" hint="Mutator for property userId" output="false">
<cfargument name="userId" type="numeric" required="true" hint="The value to set userId to">
<cfscript>
if(NOT StructKeyExists(instance, "userId") OR getuserId() neq arguments.userId)
{
instance.userId = getUtility().trimZero(arguments.userId);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getpassword" access="public" returntype="string" default="string" hint="Accessor for property password" output="false">
<cfscript>
return instance.password;
</cfscript>
</cffunction>

<cffunction name="setpassword" access="public" returntype="void" default="void" hint="Mutator for property password" output="false">
<cfargument name="password" type="string" required="true" hint="The value to set password to">
<cfscript>
if(NOT StructKeyExists(instance, "password") OR Compare(getpassword(), arguments.password) neq 0)
{
instance.password = (arguments.password);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getfirstName" access="public" returntype="string" default="string" hint="Accessor for property firstName" output="false">
<cfscript>
return instance.firstName;
</cfscript>
</cffunction>

<cffunction name="setfirstName" access="public" returntype="void" default="void" hint="Mutator for property firstName" output="false">
<cfargument name="firstName" type="string" required="true" hint="The value to set firstName to">
<cfscript>
if(NOT StructKeyExists(instance, "firstName") OR Compare(getfirstName(), arguments.firstName) neq 0)
{
instance.firstName = (arguments.firstName);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getlastName" access="public" returntype="string" default="string" hint="Accessor for property lastName" output="false">
<cfscript>
return instance.lastName;
</cfscript>
</cffunction>

<cffunction name="setlastName" access="public" returntype="void" default="void" hint="Mutator for property lastName" output="false">
<cfargument name="lastName" type="string" required="true" hint="The value to set lastName to">
<cfscript>
if(NOT StructKeyExists(instance, "lastName") OR Compare(getlastName(), arguments.lastName) neq 0)
{
instance.lastName = (arguments.lastName);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getemail" access="public" returntype="string" default="string" hint="Accessor for property email" output="false">
<cfscript>
return instance.email;
</cfscript>
</cffunction>

<cffunction name="setemail" access="public" returntype="void" default="void" hint="Mutator for property email" output="false">
<cfargument name="email" type="string" required="true" hint="The value to set email to">
<cfscript>
if(NOT StructKeyExists(instance, "email") OR Compare(getemail(), arguments.email) neq 0)
{
instance.email = (arguments.email);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getupdatedOn" access="public" returntype="date" default="date" hint="Accessor for property updatedOn" output="false">
<cfscript>
return instance.updatedOn;
</cfscript>
</cffunction>

<cffunction name="setupdatedOn" access="public" returntype="void" default="void" hint="Mutator for property updatedOn" output="false">
<cfargument name="updatedOn" type="date" required="true" hint="The value to set updatedOn to">
<cfscript>
if(NOT StructKeyExists(instance, "updatedOn") OR getupdatedOn() neq arguments.updatedOn)
{
instance.updatedOn = (arguments.updatedOn);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getcreatedOn" access="public" returntype="date" default="date" hint="Accessor for property createdOn" output="false">
<cfscript>
return instance.createdOn;
</cfscript>
</cffunction>

<cffunction name="setcreatedOn" access="public" returntype="void" default="void" hint="Mutator for property createdOn" output="false">
<cfargument name="createdOn" type="date" required="true" hint="The value to set createdOn to">
<cfscript>
if(NOT StructKeyExists(instance, "createdOn") OR getcreatedOn() neq arguments.createdOn)
{
instance.createdOn = (arguments.createdOn);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getisActive" access="public" returntype="boolean" default="boolean" hint="Accessor for property isActive" output="false">
<cfscript>
return instance.isActive;
</cfscript>
</cffunction>

<cffunction name="setisActive" access="public" returntype="void" default="void" hint="Mutator for property isActive" output="false">
<cfargument name="isActive" type="boolean" required="true" hint="The value to set isActive to">
<cfscript>
if(NOT StructKeyExists(instance, "isActive") OR getisActive() neq arguments.isActive)
{
instance.isActive = (arguments.isActive);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getUserTypeisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'UserType' has been loaded yet" output="false">
<cfscript>
if(NOT StructKeyExists(getLoaded(), "UserType"))
{
setUserTypeisLoaded(false);
}
return StructFind(getLoaded(), "UserType");
</cfscript>
</cffunction>

<cffunction name="setUserTypeisLoaded" access="private" returntype="void" default="void" hint="Set the loaded state of composition 'arguments.name'" output="false">
<cfargument name="loaded" type="boolean" required="true" hint="Whether or not this composition has been loaded">
<cfscript>
StructInsert(getLoaded(), "UserType", arguments.loaded, true);
</cfscript>
</cffunction>

<cffunction name="loadUserType" access="package" returntype="void" default="void" hint="Lazy load composition 'UserType'" output="false">
<cfif NOT getUserTypeisLoaded()>
<cflock name="transfer.load.user.User.UserType.#getSystem().identityHashCode(this)#" timeout="60">
<cfif NOT getUserTypeisLoaded()>
<cfscript>
getTransfer().loadManyToOne(getThisObject(), "UserType");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="unLoadUserType" access="private" returntype="void" default="void" hint="unload lazy load composition 'UserType'" output="false">
<cfif getUserTypeisLoaded()>
<cflock name="transfer.load.user.User.UserType.#getSystem().identityHashCode(this)#" timeout="60">
<cfif getUserTypeisLoaded()>
<cfscript>
setUserTypeisLoaded(false);
StructDelete(instance, "UserType");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="set the state of this object from a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
var composite = 0;
if(NOT getIsPersisted())
{
setuserId(StructFind(arguments.memento, "userId"));
}
setPropertyMemento(arguments.memento);
setUserTypeisLoaded(false);
if(StructKeyExists(arguments.memento, "UserType"))
{
composite = StructFind(arguments.memento, "UserType");
}
else
{
composite = StructNew();
}
setUserTypeMemento(composite);
</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="set the Property state of this object with a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
setpassword(StructFind(arguments.memento, "password"));
setfirstName(StructFind(arguments.memento, "firstName"));
setlastName(StructFind(arguments.memento, "lastName"));
setemail(StructFind(arguments.memento, "email"));
setupdatedOn(StructFind(arguments.memento, "updatedOn"));
setcreatedOn(StructFind(arguments.memento, "createdOn"));
setisActive(StructFind(arguments.memento, "isActive"));
</cfscript>
</cffunction>

<cffunction name="setUserTypeMemento" access="public" returntype="void" default="void" hint="set the state of composition manytoone 'UserType'" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
var composite = 0;
if(StructIsEmpty(arguments.memento))
{
removeUserType();
}
else
{
composite = getComposite("user.UserType", arguments.memento, "userTypeId");
setUserType(composite);
}
</cfscript>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
StructInsert(memento, "userId", getuserId());
StructInsert(memento, "transfer_isDirty", getIsDirty());
StructInsert(memento, "transfer_isPersisted", getIsPersisted());
StructInsert(memento, "transfer_isProxied", false);
StructAppend(memento, getPropertyMemento());
StructInsert(memento, "UserType", getUserTypeMemento());
return memento;
</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
StructInsert(memento, "password", getpassword());
StructInsert(memento, "firstName", getfirstName());
StructInsert(memento, "lastName", getlastName());
StructInsert(memento, "email", getemail());
StructInsert(memento, "updatedOn", getupdatedOn());
StructInsert(memento, "createdOn", getcreatedOn());
StructInsert(memento, "isActive", getisActive());
return memento;
</cfscript>
</cffunction>

<cffunction name="getUserTypeMemento" access="public" returntype="struct" default="struct" hint="returns the memento for manytoone UserType" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
if(hasUserType())
{
memento = getUserType().getMemento();
}
return memento;
</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The object to copy values to">
<cfscript>
if(arguments.transfer.getClassName() neq "user.User")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'user.User'");
}
arguments.transfer.setMemento(getMemento());
</cfscript>
</cffunction>

<cffunction name="getUserType" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Accessor for UserType, user.UserType" output="false">
<cfscript>
if(NOT getUserTypeisLoaded())
{
loadUserType();
}
if(NOT structKeyExists(instance, "UserType"))
{
throw("ManyToOneNotSetException","A ManyToOne TransferObject has not been initialised.","In TransferObject 'user.User' manytoone 'user.UserType' does not exist, when calling getUserType()");
}
return instance.UserType;
</cfscript>
</cffunction>

<cffunction name="setUserType" access="public" returntype="void" default="void" hint="Mutator for UserType, user.UserType" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The user.UserType to set">
<cfscript>
if(arguments.transfer.getClassName() neq "user.UserType")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'user.UserType'");
}
if((NOT getUserTypeisLoaded()) OR (NOT (StructKeyExists(instance, "UserType") AND getUserType().equalsTransfer(arguments.transfer))))
{
instance.UserType = arguments.transfer;
setIsDirty(true);
setUserTypeisLoaded(true);
}
</cfscript>
</cffunction>

<cffunction name="hasUserType" access="public" returntype="boolean" default="boolean" hint="Whether or not this object contains a user.UserType" output="false">
<cfscript>
if(NOT getUserTypeisLoaded())
{
loadUserType();
}
return StructKeyExists(instance,"UserType");
</cfscript>
</cffunction>

<cffunction name="removeUserType" access="public" returntype="void" default="void" hint="remove the instance of user.UserType" output="false">
<cfscript>
if(NOT getUserTypeisLoaded() OR hasUserType())
{
StructDelete(instance,"UserType");
setIsDirty(true);
setUserTypeisLoaded(true);
}
</cfscript>
</cffunction>

<cffunction name="validateCacheState" access="package" returntype="boolean" default="boolean" hint="if this object is cached, then validate that all it's composites are cached too" output="false">
<cfscript>
var iterator = 0;
var item = 0;
if(getIsPersisted() AND NOT getTransfer().validateIsCached(getThisObject()))
{
return true;
}
if(getUserTypeisLoaded() AND hasUserType())
{
item = getUserType();
if(item.getIsClone() OR NOT getTransfer().validateIsCached(item))
{
return false;
}
}
return true;
</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when creates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when deletes occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
if(className eq "user.UserType")
{
if(getUserTypeIsLoaded() AND hasUserType() AND getUserType().equalsTransfer(arguments.event.getTransferObject()))
{
removeUserType(arguments.event.getTransferObject());
}
}
</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="Observer method action for when updates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
</cfscript>
</cffunction>

<cffunction name="actionAfterDiscardTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when discards occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var discard = false;
var className = arguments.event.getTransferObject().getClassName();
if(className eq "user.UserType")
{
if(getUserTypeIsLoaded() AND hasUserType() AND getUserType().equalsTransfer(arguments.event.getTransferObject()))
{
if(getUserTypeisLoaded())
{
unloadUserType();
}
}
}
if(discard)
{
getTransfer().discard(getThisObject());
}
</cfscript>
</cffunction>


